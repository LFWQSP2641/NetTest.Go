name: Compile Qt project

on: push

env:
  BUILD_TYPE: Release
  QT_VERSION: '6.10.0'
  GO_VERSION: '1.25.1'

permissions:
  contents: write

jobs:
  build-desktop:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            qt_host: windows
            arch: win64_msvc2022_64
            cmake_generator: 'Visual Studio 17 2022'
          - os: ubuntu-latest
            qt_host: linux
            arch: linux_gcc_64
            cmake_generator: 'Ninja'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        cache: 'true'
        version: ${{ env.QT_VERSION }}
        host: ${{ matrix.qt_host }}
        target: 'desktop'
        arch: ${{ matrix.arch }}

    - name: Install Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build Go libraries
      run: |
        python scripts/build_go.py

    - name: Configure CMake
      run: |
        cd Qt
        cmake -B ${{github.workspace}}/Qt/build -S . -G "${{ matrix.cmake_generator }}" -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{github.workspace}}/Qt/build/bin

    - name: Build
      run: |
        cd Qt
        cmake --build ${{github.workspace}}/Qt/build --config ${{ env.BUILD_TYPE }} --parallel

    - name: Package (Windows Only)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p release_package
        cp Qt/build/bin/Release/appNetTest.exe release_package/
        cp Qt/build/bin/Release/netcore.dll release_package/
        windeployqt --qmldir . release_package/appNetTest.exe
      shell: bash

    - name: Compress (Windows Only)
      if: matrix.os == 'windows-latest'
      run: |
        7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on NetTest_${{ matrix.qt_host }}_${{ matrix.arch }}.7z release_package
      shell: bash

    - name: Upload executable (Windows Only)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: appNetTest.exe
        path: Qt/build/bin/Release/appNetTest.exe
        compression-level: 0

    - name: Upload build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: NetTest_${{ matrix.qt_host }}_${{ matrix.arch }}.7z
        path: NetTest_${{ matrix.qt_host }}_${{ matrix.arch }}.7z
        compression-level: 0

    - name: Release Package (Windows Only)
      if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{github.workspace}}/NetTest_${{ matrix.qt_host }}_${{ matrix.arch }}.7z
          ${{github.workspace}}/Qt/build/bin/Release/appNetTest.exe
        generate_release_notes: true

    - name: Compress (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on NetTest_${{ matrix.qt_host }}_${{ matrix.arch }}.7z Qt/build/bin

    - name: Upload build artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: NetTest_${{ matrix.qt_host }}_${{ matrix.arch }}
        path: NetTest_${{ matrix.qt_host }}_${{ matrix.arch }}.7z
        compression-level: 0

    - name: Release Package (Linux/macOS)
      if: matrix.os != 'windows-latest' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{github.workspace}}/NetTest_${{ matrix.qt_host }}_${{ matrix.arch }}.7z
        generate_release_notes: true

  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - android_abi: arm64-v8a
            qt_arch: android_arm64_v8a
          - android_abi: armeabi-v7a
            qt_arch: android_armv7
          - android_abi: x86_64
            qt_arch: android_x86_64
          - android_abi: x86
            qt_arch: android_x86

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Get CMake
      uses: lukka/get-cmake@latest

    - name: Install JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install Android SDK components
      run: |
        sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses <<< 'y' > /dev/null
        sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
          "platform-tools" \
          "platforms;android-35" \
          "build-tools;35.0.1" \
          "ndk;27.2.12479018"

    - name: Select default NDK (per ABI)
      run: |
        echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/27.2.12479018" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/27.2.12479018" >> $GITHUB_ENV

    - name: Ensure Ninja present
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build

    - name: Install Qt (Desktop host tools)
      uses: jurplel/install-qt-action@v4
      with:
        cache: 'true'
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        arch: 'linux_gcc_64'

    - name: Capture QT_HOST_PATH
      id: hostpath
      run: |
        echo "QT_HOST_PATH=$(qmake -query QT_HOST_PREFIX)" >> $GITHUB_ENV

    - name: Install Qt (Android target)
      uses: jurplel/install-qt-action@v4
      with:
        cache: 'true'
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'android'
        arch: ${{ matrix.qt_arch }}

    - name: Debug
      run: |
        sudo apt-get update
        sudo apt-get install -y tree
        tree $ANDROID_NDK_ROOT
        tree /home/runner/work/NetTest.Go/Qt

    - name: Install Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build Go libraries
      run: |
        python scripts/build_android_go.py

    - name: Configure CMake (Android)
      run: |
        export LD_LIBRARY_PATH="$QT_ROOT_DIR/lib"
        export PKG_CONFIG_PATH="$QT_ROOT_DIR/lib/pkgconfig"
        qt-cmake \
          -S Qt \
          -B Qt/build-android-${{ matrix.android_abi }} \
          -G Ninja \
          -DANDROID_ABI=${{ matrix.android_abi }} \
          -DQT_HOST_PATH="$QT_HOST_PATH" \
          -DCMAKE_PREFIX_PATH="$QT_ROOT_DIR" \
          -DQt6_DIR="$QT_ROOT_DIR/lib/cmake/Qt6" \
          -DANDROID_PLATFORM=android-28 \
          -DCMAKE_TOOLCHAIN_FILE="$QT_ROOT_DIR/lib/cmake/Qt6/qt.toolchain.cmake" \
          -DQT_CHAINLOAD_TOOLCHAIN_FILE="$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake" \
          -DQT_ANDROID_PACKAGE_SOURCE_DIR="${{github.workspace}}/Qt/android" \
          -DANDROID_PACKAGE_SOURCE_DIR="${{github.workspace}}/Qt/android" \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Decode release keystore
      env:
        ANDROID_RELEASE_KEYSTORE_BASE64: ${{ secrets.ANDROID_RELEASE_KEYSTORE_BASE64 }}
      run: |
        echo "$ANDROID_RELEASE_KEYSTORE_BASE64" | base64 -d > $HOME/release_keystore.jks
        ls -l $HOME/release_keystore.jks

    - name: Build (assembleRelease with signing)
      env:
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      run: |
        cmake --build Qt/build-android-${{ matrix.android_abi }} --config ${{ env.BUILD_TYPE }} --parallel
        cd Qt/build-android-${{ matrix.android_abi }}/android-build
        ./gradlew --no-daemon --stacktrace assembleRelease \
          -Pandroid.injected.signing.store.file=$HOME/release_keystore.jks \
          -Pandroid.injected.signing.store.password=$ANDROID_KEYSTORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$ANDROID_KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$ANDROID_KEY_PASSWORD

    - name: Rename APK to NetTest_android_${{ matrix.android_abi }} (underscored)
      id: rename_apk
      shell: bash
      run: |
        set -euo pipefail
        ABI="${{ matrix.android_abi }}"
        SAFE_ABI="${ABI//-/_}"
        OUTDIR="Qt/build-android-${ABI}/android-build/build/outputs/apk/release"
        SRC_APK="$(ls -1 "$OUTDIR"/*release*.apk | head -n 1)"
        DEST_APK="$OUTDIR/NetTest_android_${SAFE_ABI}.apk"
        cp "$SRC_APK" "$DEST_APK"
        echo "Renamed to: $DEST_APK"
        echo "apk_path=$DEST_APK" >> "$GITHUB_OUTPUT"
        echo "apk_path_abs=${GITHUB_WORKSPACE}/$DEST_APK" >> "$GITHUB_OUTPUT"
        echo "artifact_name=NetTest_android_${SAFE_ABI}.apk" >> "$GITHUB_OUTPUT"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.rename_apk.outputs.artifact_name }}
        path: ${{ steps.rename_apk.outputs.apk_path }}
        compression-level: 0

    - name: Release APK (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.rename_apk.outputs.apk_path_abs }}
        generate_release_notes: true
